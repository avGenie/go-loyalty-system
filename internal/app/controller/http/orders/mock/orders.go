// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/controller/http/orders/orders.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/avGenie/go-loyalty-system/internal/app/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderProcessor is a mock of OrderProcessor interface.
type MockOrderProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProcessorMockRecorder
}

// MockOrderProcessorMockRecorder is the mock recorder for MockOrderProcessor.
type MockOrderProcessorMockRecorder struct {
	mock *MockOrderProcessor
}

// NewMockOrderProcessor creates a new mock instance.
func NewMockOrderProcessor(ctrl *gomock.Controller) *MockOrderProcessor {
	mock := &MockOrderProcessor{ctrl: ctrl}
	mock.recorder = &MockOrderProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProcessor) EXPECT() *MockOrderProcessorMockRecorder {
	return m.recorder
}

// GetUserOrders mocks base method.
func (m *MockOrderProcessor) GetUserOrders(ctx context.Context, userID entity.UserID) (entity.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].(entity.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockOrderProcessorMockRecorder) GetUserOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockOrderProcessor)(nil).GetUserOrders), ctx, userID)
}

// UpdateOrders mocks base method.
func (m *MockOrderProcessor) UpdateOrders(ctx context.Context, orders entity.Orders) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrders", ctx, orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrders indicates an expected call of UpdateOrders.
func (mr *MockOrderProcessorMockRecorder) UpdateOrders(ctx, orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrders", reflect.TypeOf((*MockOrderProcessor)(nil).UpdateOrders), ctx, orders)
}

// UploadOrder mocks base method.
func (m *MockOrderProcessor) UploadOrder(ctx context.Context, userID entity.UserID, orderNumber entity.OrderNumber) (entity.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadOrder", ctx, userID, orderNumber)
	ret0, _ := ret[0].(entity.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadOrder indicates an expected call of UploadOrder.
func (mr *MockOrderProcessorMockRecorder) UploadOrder(ctx, userID, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadOrder", reflect.TypeOf((*MockOrderProcessor)(nil).UploadOrder), ctx, userID, orderNumber)
}

// MockAccrualOrderConnector is a mock of AccrualOrderConnector interface.
type MockAccrualOrderConnector struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualOrderConnectorMockRecorder
}

// MockAccrualOrderConnectorMockRecorder is the mock recorder for MockAccrualOrderConnector.
type MockAccrualOrderConnectorMockRecorder struct {
	mock *MockAccrualOrderConnector
}

// NewMockAccrualOrderConnector creates a new mock instance.
func NewMockAccrualOrderConnector(ctrl *gomock.Controller) *MockAccrualOrderConnector {
	mock := &MockAccrualOrderConnector{ctrl: ctrl}
	mock.recorder = &MockAccrualOrderConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualOrderConnector) EXPECT() *MockAccrualOrderConnectorMockRecorder {
	return m.recorder
}

// CloseInput mocks base method.
func (m *MockAccrualOrderConnector) CloseInput() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseInput")
}

// CloseInput indicates an expected call of CloseInput.
func (mr *MockAccrualOrderConnectorMockRecorder) CloseInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseInput", reflect.TypeOf((*MockAccrualOrderConnector)(nil).CloseInput))
}

// GetOutput mocks base method.
func (m *MockAccrualOrderConnector) GetOutput() (entity.AccrualOrder, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput")
	ret0, _ := ret[0].(entity.AccrualOrder)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockAccrualOrderConnectorMockRecorder) GetOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockAccrualOrderConnector)(nil).GetOutput))
}

// SetInput mocks base method.
func (m *MockAccrualOrderConnector) SetInput(number entity.OrderNumber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInput", number)
}

// SetInput indicates an expected call of SetInput.
func (mr *MockAccrualOrderConnectorMockRecorder) SetInput(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInput", reflect.TypeOf((*MockAccrualOrderConnector)(nil).SetInput), number)
}
